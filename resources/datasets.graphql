type Query {
  # __type(name: String): __Schema
  # @resolve(fn:"com.walmartlabs.lacinia.introspection/resolve-root-type")
  # @protect(scopes:["dataset:graphiql"])
  #
  # __schema: __Type
  # @resolve(fn:"com.walmartlabs.lacinia.introspection/resolve-root-schema")
  # @protect(scopes:["dataset:graphiql"])

  getDeployedModel:DatasetVersion
  @resolve(fn: "neyho.eywa.dataset/get-deployed-model")
}


type SSShare {
  id: Int
  value: String
}


enum EncryptionStatus {
  INITIALIZED
  WAITING_FOR_MORE_SHARES
  ERROR
}


input SSShareInput {
  id: Int
  value: String
}


type EncryptionResponse {
  status: EncryptionStatus
  message: String
}

type Mutation {
  deployDataset(version: DatasetVersionInput):DatasetVersion
  @resolve(fn: "neyho.eywa.dataset/deploy-dataset")
  @protect(scopes: ["dataset:deploy"])

  deleteDataset:Boolean
  @hook(fn: "neyho.eywa.dataset/prepare-deletion-context" metric: -1)
  @hook(fn: "neyho.eywa.dataset/destroy-linked-versions")
  @protect(scopes: ["dataset:delete"])

  initializeEncryptionWithShare(share: SSShareInput): EncryptionResponse
  @resolve(fn: "neyho.eywa.dataset.encryption/init-with-share")

  initializeEncryptionRaw(master: String): EncryptionResponse
  @resolve(fn: "neyho.eywa.dataset.encryption/init-with-master")


  generateShares(shares: Int=5, threshold: Int=3):[SSShare]
  @resolve(fn: "neyho.eywa.dataset.encryption/generate-shares")

  generateMaster:String
  @resolve(fn: "neyho.eywa.dataset.encryption/generate-master")

}

type Subscription {
  refreshedGlobalDataset:DatasetVersion
  @resolve(fn: "neyho.eywa.dataset/deploy-update-subscription")
  @protect(scopes: ["dataset:subscription"])
}
